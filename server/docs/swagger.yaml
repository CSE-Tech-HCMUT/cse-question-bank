basePath: /api
definitions:
  department_res.DepartmentResponse:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  entity.Option:
    properties:
      id:
        type: integer
      name:
        type: string
      tagID:
        type: integer
    type: object
  exam_res.ChildExamResponse:
    properties:
      code:
        type: integer
      id:
        type: string
      semester:
        type: string
    type: object
  exam_res.ExamResponse:
    properties:
      children:
        description: List of child exams
        items:
          $ref: '#/definitions/exam_res.ChildExamResponse'
        type: array
      filterConditions:
        items:
          $ref: '#/definitions/exam_res.FilterCondition'
        type: array
      id:
        type: string
      numberQuestion:
        type: integer
      parentExam:
        allOf:
        - $ref: '#/definitions/exam_res.ParentExamResponse'
        description: Reference to the parent exam
      questions:
        items:
          $ref: '#/definitions/question_res.QuestionResponse'
        type: array
      semester:
        type: string
      subject:
        $ref: '#/definitions/exam_res.SubjectResponse'
    type: object
  exam_res.FilterCondition:
    properties:
      id:
        type: integer
      numberQuestion:
        type: integer
      tagAssignments:
        items:
          $ref: '#/definitions/exam_res.TagAssignment'
        type: array
    type: object
  exam_res.FilterQuestionsList:
    properties:
      id:
        type: integer
      numberQuestion:
        type: integer
      questions:
        items:
          $ref: '#/definitions/exam_res.QuestionFilterExam'
        type: array
      tagAssignments:
        items:
          $ref: '#/definitions/exam_res.TagAssignment'
        type: array
    type: object
  exam_res.ParentExamResponse:
    properties:
      code:
        type: integer
      id:
        type: string
      semester:
        type: string
    type: object
  exam_res.QuestionFilterExam:
    properties:
      answer:
        items:
          type: object
        type: array
      canShuffle:
        type: boolean
      content:
        type: string
      id:
        type: string
      isUsed:
        type: boolean
      subQuestions:
        items:
          type: object
        type: array
      subject:
        $ref: '#/definitions/question_res.SubjectResponse'
      tagAssignments:
        items:
          $ref: '#/definitions/question_res.TagAssignmentResponse'
        type: array
      type:
        type: string
    type: object
  exam_res.SubjectResponse:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  exam_res.TagAssignment:
    properties:
      id:
        type: integer
      option:
        $ref: '#/definitions/option_res.OptionResponse'
      tag:
        $ref: '#/definitions/tag_res.TagResponse'
    type: object
  internal_module_exam_model_req.TagAssignment:
    properties:
      id:
        type: integer
      optionId:
        type: integer
      tagId:
        type: integer
    type: object
  internal_module_question_model_req.TagAssignment:
    properties:
      optionId:
        type: integer
      tagId:
        type: integer
    type: object
  internal_module_tag_model_req.UpdateOptionRequest:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  option_res.OptionResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  question_res.OptionResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  question_res.QuestionResponse:
    properties:
      answer:
        items:
          type: object
        type: array
      canShuffle:
        type: boolean
      content:
        type: string
      id:
        type: string
      subQuestions:
        items:
          type: object
        type: array
      subject:
        $ref: '#/definitions/question_res.SubjectResponse'
      tagAssignments:
        items:
          $ref: '#/definitions/question_res.TagAssignmentResponse'
        type: array
      type:
        type: string
    type: object
  question_res.SubjectResponse:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  question_res.TagAssignmentResponse:
    properties:
      id:
        type: integer
      option:
        $ref: '#/definitions/question_res.OptionResponse'
      tag:
        $ref: '#/definitions/question_res.TagResponse'
    type: object
  question_res.TagResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  req.AddPolicyRequest:
    properties:
      method:
        type: string
      object:
        type: string
      role:
        type: string
    type: object
  req.AssignRoleRequest:
    properties:
      role:
        type: string
      userId:
        type: string
    type: object
  req.CreateExamRequest:
    properties:
      code:
        type: integer
      filterConditions:
        description: 'TODO: add filtercondition for exam to monitor'
        items:
          $ref: '#/definitions/req.FilterCondition'
        type: array
      numberQuestion:
        type: integer
      questionIdList:
        items:
          type: string
        type: array
      subjectId:
        type: string
    type: object
  req.CreateOptionRequest:
    properties:
      name:
        type: string
      tagId:
        type: integer
    type: object
  req.CreateQuestionRequest:
    properties:
      answer:
        items:
          type: object
        type: array
      canShuffle:
        type: boolean
      content:
        type: string
      isParent:
        type: boolean
      parentId:
        type: string
      subjectId:
        type: string
      tagAssignments:
        items:
          $ref: '#/definitions/req.CreateTagAssignmentRequest'
        type: array
      type:
        type: string
    type: object
  req.CreateSubjectRequest:
    properties:
      code:
        type: string
      departmentCode:
        type: string
      name:
        type: string
    type: object
  req.CreateTagAssignmentRequest:
    properties:
      optionId:
        type: integer
      tagId:
        type: integer
    type: object
  req.CreateTagOptionRequest:
    properties:
      name:
        type: string
    type: object
  req.CreateTagRequest:
    properties:
      description:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/req.CreateTagOptionRequest'
        type: array
      subjectId:
        type: string
    type: object
  req.EditQuestionRequest:
    properties:
      answer:
        items:
          type: object
        type: array
      canShuffle:
        type: boolean
      content:
        type: string
      id:
        type: string
      subjectId:
        type: string
      tagAssignments:
        items:
          $ref: '#/definitions/req.UpdateTagAssignmentRequest'
        type: array
      type:
        type: string
    required:
    - id
    type: object
  req.FilterCondition:
    properties:
      id:
        type: integer
      numberQuestion:
        type: integer
      tagAssignments:
        items:
          $ref: '#/definitions/internal_module_exam_model_req.TagAssignment'
        type: array
    type: object
  req.FilterQuestionRequest:
    properties:
      subjectId:
        type: string
      tagAssignments:
        items:
          $ref: '#/definitions/internal_module_question_model_req.TagAssignment'
        type: array
    type: object
  req.LoginRequest:
    properties:
      mail:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  req.RegisterAccountRequest:
    properties:
      mail:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  req.ShuffleExamReq:
    properties:
      examId:
        type: string
      isShuffleInsideQuestions:
        type: boolean
      numberExams:
        type: integer
    type: object
  req.UpdateExamRequest:
    properties:
      code:
        type: integer
      filterConditions:
        items:
          $ref: '#/definitions/req.FilterCondition'
        type: array
      id:
        type: string
      numberQuestion:
        type: integer
      questionIdList:
        items:
          type: string
        type: array
      subjectId:
        type: string
    type: object
  req.UpdateTagAssignmentRequest:
    properties:
      id:
        type: integer
      optionId:
        type: integer
      tagId:
        type: integer
    type: object
  req.UpdateTagRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/internal_module_tag_model_req.UpdateOptionRequest'
        type: array
      subjectId:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      errorKey:
        type: string
      errorMessage:
        type: string
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  subject_res.SubjectResponse:
    properties:
      code:
        type: string
      department:
        $ref: '#/definitions/department_res.DepartmentResponse'
      id:
        type: string
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/tag_res.TagResponse'
        type: array
    type: object
  tag_res.SubjectResponse:
    properties:
      code:
        type: string
      department:
        $ref: '#/definitions/department_res.DepartmentResponse'
      id:
        type: string
      name:
        type: string
    type: object
  tag_res.TagResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/option_res.OptionResponse'
        type: array
      subject:
        allOf:
        - $ref: '#/definitions/tag_res.SubjectResponse'
        description: 'TODO: Add table subject -> model subject'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /authen/login:
    post:
      consumes:
      - application/json
      description: Register account to system.
      parameters:
      - description: RegisterAccountRequest JSON
        in: body
        name: RegisterAccountRequest
        required: true
        schema:
          $ref: '#/definitions/req.RegisterAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User register account to system.
      tags:
      - Policy
  /author/add-policy:
    post:
      consumes:
      - application/json
      description: |-
        Add policy for system to authen user. Where "role" is the role of user, "object" is the resource user have permission to and "action" is the action user can do on that resource.
        Example: role = "subject_manager:<subject-id>", object = "subject:<subject-id>", action = "manage_subject" means subject manager can do everything on subject resource.
      parameters:
      - description: AddPolicyRequest JSON
        in: body
        name: AddPolicyRequest
        required: true
        schema:
          $ref: '#/definitions/req.AddPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Add policy for system to authen user
      tags:
      - Policy
  /author/assign-role:
    post:
      consumes:
      - application/json
      description: |-
        Assign Role for user.
        Using this API, you can assign a role to a user. The role is defined in the system and can be used to control access to resources.
        Using Get /author/get-all-roles to get all roles in system and /author/get-all-policies to get all policies in system.
      parameters:
      - description: AssignRoleRequest JSON
        in: body
        name: AssignRoleRequest
        required: true
        schema:
          $ref: '#/definitions/req.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Assign Role for user
      tags:
      - Author
  /author/get-all-policies:
    get:
      description: Get all policies of system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all policies of system
      tags:
      - Author
  /author/get-all-roles:
    get:
      description: Get all roles of system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all roles of system
      tags:
      - Author
  /author/get-grouping-policy:
    get:
      description: Get all group policies of system.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all group policies of system
      tags:
      - Author
  /compile-latex/exams/{id}:
    get:
      consumes:
      - application/json
      description: Get exam PDF preview
      parameters:
      - description: Exam Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get exam PDF preview
      tags:
      - Latex Compile
  /compile-latex/questions/{id}:
    get:
      consumes:
      - application/json
      description: Get question pdf preview
      parameters:
      - description: Question Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get question pdf preview
      tags:
      - Latex Compile
  /departments:
    get:
      consumes:
      - application/json
      description: Show all departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/department_res.DepartmentResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show all departments
      tags:
      - Department
  /exams:
    get:
      consumes:
      - application/json
      description: Show all exams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/exam_res.ExamResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show all exams
      tags:
      - Exam
    post:
      consumes:
      - application/json
      description: Create a exam
      parameters:
      - description: CreateExamRequest JSON
        in: body
        name: CreateExamRequest
        required: true
        schema:
          $ref: '#/definitions/req.CreateExamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/exam_res.ExamResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a exam
      tags:
      - Exam
    put:
      consumes:
      - application/json
      description: Update a exam
      parameters:
      - description: UpdateExamRequest JSON
        in: body
        name: UpdateExamRequest
        required: true
        schema:
          $ref: '#/definitions/req.UpdateExamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/exam_res.ExamResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a exam
      tags:
      - Exam
  /exams/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a exam
      parameters:
      - description: Exam Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a exam
      tags:
      - Exam
    get:
      consumes:
      - application/json
      description: Get exam
      parameters:
      - description: Exam Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/exam_res.FilterQuestionsList'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get exam
      tags:
      - Exam
  /exams/{id}/generate-auto:
    post:
      consumes:
      - application/json
      description: Generate exam auto
      parameters:
      - description: Exam Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/exam_res.ExamResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Generate exam auto
      tags:
      - Exam
  /exams/{id}/get-filter-list:
    get:
      consumes:
      - application/json
      description: Get exam filter questions list
      parameters:
      - description: Exam Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/exam_res.FilterQuestionsList'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get exam filter questions list
      tags:
      - Exam
  /exams/shuffle:
    post:
      consumes:
      - application/json
      description: Get all clone exams root exams, then shuffle question inside
      parameters:
      - description: ShuffleExamReq JSON
        in: body
        name: ShuffleExamReq
        required: true
        schema:
          $ref: '#/definitions/req.ShuffleExamReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/exam_res.ExamResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all clone exams root exams, then shuffle question inside
      tags:
      - Exam
  /options:
    post:
      consumes:
      - application/json
      description: Create a option
      parameters:
      - description: CreateOptionRequest JSON
        in: body
        name: CreateOptionRequest
        required: true
        schema:
          $ref: '#/definitions/req.CreateOptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entity.Option'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a option
      tags:
      - Option
  /options/{id}:
    post:
      consumes:
      - application/json
      description: Delete a option
      parameters:
      - description: Id int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a option
      tags:
      - Option
  /options/{id}/get-used:
    post:
      consumes:
      - application/json
      description: Check option is used or not
      parameters:
      - description: Id int
        in: path
        name: Id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Check option is used or not
      tags:
      - Option
  /questions:
    get:
      consumes:
      - application/json
      description: Get all questions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/question_res.QuestionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all questions
      tags:
      - Question
    post:
      consumes:
      - application/json
      description: Create a question
      parameters:
      - description: CreateQuestionRequest JSON
        in: body
        name: CreateQuestionRequest
        required: true
        schema:
          $ref: '#/definitions/req.CreateQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/question_res.QuestionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a question
      tags:
      - Question
    put:
      consumes:
      - application/json
      description: Edit a question
      parameters:
      - description: EditQuestionReq JSON
        in: body
        name: EditQuestionRequest
        required: true
        schema:
          $ref: '#/definitions/req.EditQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Edit a question
      tags:
      - Question
  /questions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a question
      tags:
      - Question
    get:
      consumes:
      - application/json
      description: Show a question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/question_res.QuestionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show a question
      tags:
      - Question
  /questions/filter_question:
    post:
      consumes:
      - application/json
      description: Get filtered questions
      parameters:
      - description: FilterQuestionRequest JSON
        in: body
        name: CreateQuestionRequest
        required: true
        schema:
          $ref: '#/definitions/req.FilterQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/question_res.QuestionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get filtered questions
      tags:
      - Question
  /subjects:
    get:
      consumes:
      - application/json
      description: Show all subjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/subject_res.SubjectResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show all subjects
      tags:
      - Subject
    post:
      consumes:
      - application/json
      description: Create a subject
      parameters:
      - description: CreateSubjectRequest JSON
        in: body
        name: CreateSubjectRequest
        required: true
        schema:
          $ref: '#/definitions/req.CreateSubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/subject_res.SubjectResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a subject
      tags:
      - Subject
  /subjects/{id}:
    get:
      consumes:
      - application/json
      description: Get subject by id
      parameters:
      - description: Subject Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/subject_res.SubjectResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get subject by id
      tags:
      - Subject
  /tags:
    get:
      consumes:
      - application/json
      description: Show all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/tag_res.TagResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show all tags
      tags:
      - Tag
    post:
      consumes:
      - application/json
      description: Create a tag
      parameters:
      - description: CreateTagRequest JSON
        in: body
        name: CreateTagRequest
        required: true
        schema:
          $ref: '#/definitions/req.CreateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/tag_res.TagResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a tag
      tags:
      - Tag
    put:
      consumes:
      - application/json
      description: Edit a tag
      parameters:
      - description: UpdateTagRequest JSON
        in: body
        name: UpdateTagRequest
        required: true
        schema:
          $ref: '#/definitions/req.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/tag_res.TagResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Edit a tag
      tags:
      - Tag
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tag
      parameters:
      - description: Id int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a tag
      tags:
      - Tag
    get:
      consumes:
      - application/json
      description: Show a tag
      parameters:
      - description: Id int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/tag_res.TagResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Show a tag
      tags:
      - Tag
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
